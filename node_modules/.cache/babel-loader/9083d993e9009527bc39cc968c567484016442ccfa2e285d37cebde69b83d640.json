{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vxbc5\\\\Desktop\\\\KDT\\\\3\\uBC88\\uC9F8 \\uD504\\uB85C\\uC81D\\uD2B8 \\uBAA8\\uC158\\uCEA1\\uCCD0\\\\Sample1\\\\src\\\\components\\\\Avatar3D.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useRef, useMemo, useState } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport * as THREE from 'three';\nimport { BoneMapper } from '../utils/boneMapping';\n\n// 간단한 스틱 피겨 아바타 생성\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Avatar3D = ({\n  poses,\n  isVisible = true\n}) => {\n  _s();\n  const groupRef = useRef();\n  const [boneMapper] = useState(() => new BoneMapper());\n  const [jointRefs] = useState(() => ({}));\n\n  // 스틱 피겨의 관절과 본 정의\n  const joints = useMemo(() => {\n    const jointPositions = {\n      // 상체\n      leftShoulder: new THREE.Vector3(-0.5, 0, 0),\n      rightShoulder: new THREE.Vector3(0.5, 0, 0),\n      leftElbow: new THREE.Vector3(-0.8, -0.4, 0),\n      rightElbow: new THREE.Vector3(0.8, -0.4, 0),\n      leftWrist: new THREE.Vector3(-1.0, -0.8, 0),\n      rightWrist: new THREE.Vector3(1.0, -0.8, 0),\n      // 하체\n      leftHip: new THREE.Vector3(-0.2, -1.0, 0),\n      rightHip: new THREE.Vector3(0.2, -1.0, 0),\n      leftKnee: new THREE.Vector3(-0.2, -1.5, 0),\n      rightKnee: new THREE.Vector3(0.2, -1.5, 0),\n      leftAnkle: new THREE.Vector3(-0.2, -2.0, 0),\n      rightAnkle: new THREE.Vector3(0.2, -2.0, 0),\n      // 머리와 척추\n      nose: new THREE.Vector3(0, 0.5, 0),\n      neck: new THREE.Vector3(0, 0.2, 0),\n      spine: new THREE.Vector3(0, -0.5, 0)\n    };\n    return jointPositions;\n  }, []);\n\n  // 프레임마다 포즈 업데이트\n  useFrame(() => {\n    if (poses && groupRef.current && isVisible) {\n      // BoneMapper를 사용해 포즈를 본 데이터로 변환\n      const newBoneData = boneMapper.mapPoseToBones(poses);\n      if (newBoneData) {\n        // 각 관절의 메쉬 위치 직접 업데이트\n        Object.entries(newBoneData).forEach(([jointName, position]) => {\n          if (position instanceof THREE.Vector3 && jointRefs[jointName]) {\n            jointRefs[jointName].position.copy(position);\n          }\n        });\n\n        // 계산된 가상 관절들도 업데이트\n        if (newBoneData.neck && jointRefs.neck) {\n          jointRefs.neck.position.copy(newBoneData.neck);\n        }\n        if (newBoneData.spine && jointRefs.spine) {\n          jointRefs.spine.position.copy(newBoneData.spine);\n        }\n\n        // 원래 joints 객체도 업데이트 (선 그리기용)\n        Object.entries(newBoneData).forEach(([jointName, position]) => {\n          if (position instanceof THREE.Vector3 && joints[jointName]) {\n            joints[jointName].copy(position);\n          }\n        });\n        if (newBoneData.neck && joints.neck) {\n          joints.neck.copy(newBoneData.neck);\n        }\n        if (newBoneData.spine && joints.spine) {\n          joints.spine.copy(newBoneData.spine);\n        }\n      }\n    }\n  });\n  if (!isVisible) return null;\n  return /*#__PURE__*/_jsxDEV(\"group\", {\n    ref: groupRef,\n    children: [Object.entries(joints).map(([name, position]) => /*#__PURE__*/_jsxDEV(\"mesh\", {\n      position: position,\n      children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n        args: [0.05, 16, 16]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n        color: \"#ff6b6b\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this)]\n    }, name, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this)), poses && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(BoneLine, {\n        start: joints.leftShoulder,\n        end: joints.leftElbow,\n        color: \"#4ecdc4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(BoneLine, {\n        start: joints.leftElbow,\n        end: joints.leftWrist,\n        color: \"#4ecdc4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(BoneLine, {\n        start: joints.rightShoulder,\n        end: joints.rightElbow,\n        color: \"#4ecdc4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(BoneLine, {\n        start: joints.rightElbow,\n        end: joints.rightWrist,\n        color: \"#4ecdc4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(BoneLine, {\n        start: joints.leftShoulder,\n        end: joints.rightShoulder,\n        color: \"#45b7d1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(BoneLine, {\n        start: joints.neck,\n        end: joints.spine,\n        color: \"#45b7d1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(BoneLine, {\n        start: joints.leftHip,\n        end: joints.leftKnee,\n        color: \"#96ceb4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(BoneLine, {\n        start: joints.leftKnee,\n        end: joints.leftAnkle,\n        color: \"#96ceb4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(BoneLine, {\n        start: joints.rightHip,\n        end: joints.rightKnee,\n        color: \"#96ceb4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(BoneLine, {\n        start: joints.rightKnee,\n        end: joints.rightAnkle,\n        color: \"#96ceb4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(BoneLine, {\n        start: joints.leftHip,\n        end: joints.rightHip,\n        color: \"#45b7d1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(BoneLine, {\n        start: joints.nose,\n        end: joints.neck,\n        color: \"#f7dc6f\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n\n// 본 연결선 컴포넌트\n_s(Avatar3D, \"3heTaIcbrSbeW4Baf3l3yUn3tsw=\", false, function () {\n  return [useFrame];\n});\n_c = Avatar3D;\nconst BoneLine = ({\n  start,\n  end,\n  color = \"#ffffff\"\n}) => {\n  _s2();\n  const lineRef = useRef();\n  useFrame(() => {\n    if (lineRef.current && start && end) {\n      const points = [start, end];\n      lineRef.current.geometry.setFromPoints(points);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"line\", {\n    ref: lineRef,\n    children: [/*#__PURE__*/_jsxDEV(\"bufferGeometry\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"lineBasicMaterial\", {\n      color: color,\n      linewidth: 3\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n};\n_s2(BoneLine, \"FzwA2jjtij3dmrTs0gs1H8aQ5Sg=\", false, function () {\n  return [useFrame];\n});\n_c2 = BoneLine;\nexport default Avatar3D;\nvar _c, _c2;\n$RefreshReg$(_c, \"Avatar3D\");\n$RefreshReg$(_c2, \"BoneLine\");","map":{"version":3,"names":["React","useRef","useMemo","useState","useFrame","THREE","BoneMapper","jsxDEV","_jsxDEV","Fragment","_Fragment","Avatar3D","poses","isVisible","_s","groupRef","boneMapper","jointRefs","joints","jointPositions","leftShoulder","Vector3","rightShoulder","leftElbow","rightElbow","leftWrist","rightWrist","leftHip","rightHip","leftKnee","rightKnee","leftAnkle","rightAnkle","nose","neck","spine","current","newBoneData","mapPoseToBones","Object","entries","forEach","jointName","position","copy","ref","children","map","name","args","fileName","_jsxFileName","lineNumber","columnNumber","color","BoneLine","start","end","_c","_s2","lineRef","points","geometry","setFromPoints","linewidth","_c2","$RefreshReg$"],"sources":["C:/Users/vxbc5/Desktop/KDT/3번째 프로젝트 모션캡쳐/Sample1/src/components/Avatar3D.js"],"sourcesContent":["import React, { useRef, useMemo, useState } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport * as THREE from 'three';\nimport { BoneMapper } from '../utils/boneMapping';\n\n// 간단한 스틱 피겨 아바타 생성\nconst Avatar3D = ({ poses, isVisible = true }) => {\n  const groupRef = useRef();\n  const [boneMapper] = useState(() => new BoneMapper());\n  const [jointRefs] = useState(() => ({}));\n\n  // 스틱 피겨의 관절과 본 정의\n  const joints = useMemo(() => {\n    const jointPositions = {\n      // 상체\n      leftShoulder: new THREE.Vector3(-0.5, 0, 0),\n      rightShoulder: new THREE.Vector3(0.5, 0, 0),\n      leftElbow: new THREE.Vector3(-0.8, -0.4, 0),\n      rightElbow: new THREE.Vector3(0.8, -0.4, 0),\n      leftWrist: new THREE.Vector3(-1.0, -0.8, 0),\n      rightWrist: new THREE.Vector3(1.0, -0.8, 0),\n\n      // 하체\n      leftHip: new THREE.Vector3(-0.2, -1.0, 0),\n      rightHip: new THREE.Vector3(0.2, -1.0, 0),\n      leftKnee: new THREE.Vector3(-0.2, -1.5, 0),\n      rightKnee: new THREE.Vector3(0.2, -1.5, 0),\n      leftAnkle: new THREE.Vector3(-0.2, -2.0, 0),\n      rightAnkle: new THREE.Vector3(0.2, -2.0, 0),\n\n      // 머리와 척추\n      nose: new THREE.Vector3(0, 0.5, 0),\n      neck: new THREE.Vector3(0, 0.2, 0),\n      spine: new THREE.Vector3(0, -0.5, 0)\n    };\n\n    return jointPositions;\n  }, []);\n\n\n  // 프레임마다 포즈 업데이트\n  useFrame(() => {\n    if (poses && groupRef.current && isVisible) {\n      // BoneMapper를 사용해 포즈를 본 데이터로 변환\n      const newBoneData = boneMapper.mapPoseToBones(poses);\n\n      if (newBoneData) {\n        // 각 관절의 메쉬 위치 직접 업데이트\n        Object.entries(newBoneData).forEach(([jointName, position]) => {\n          if (position instanceof THREE.Vector3 && jointRefs[jointName]) {\n            jointRefs[jointName].position.copy(position);\n          }\n        });\n\n        // 계산된 가상 관절들도 업데이트\n        if (newBoneData.neck && jointRefs.neck) {\n          jointRefs.neck.position.copy(newBoneData.neck);\n        }\n        if (newBoneData.spine && jointRefs.spine) {\n          jointRefs.spine.position.copy(newBoneData.spine);\n        }\n\n        // 원래 joints 객체도 업데이트 (선 그리기용)\n        Object.entries(newBoneData).forEach(([jointName, position]) => {\n          if (position instanceof THREE.Vector3 && joints[jointName]) {\n            joints[jointName].copy(position);\n          }\n        });\n        if (newBoneData.neck && joints.neck) {\n          joints.neck.copy(newBoneData.neck);\n        }\n        if (newBoneData.spine && joints.spine) {\n          joints.spine.copy(newBoneData.spine);\n        }\n      }\n    }\n  });\n\n  if (!isVisible) return null;\n\n  return (\n    <group ref={groupRef}>\n      {/* 관절점들 */}\n      {Object.entries(joints).map(([name, position]) => (\n        <mesh key={name} position={position}>\n          <sphereGeometry args={[0.05, 16, 16]} />\n          <meshStandardMaterial color=\"#ff6b6b\" />\n        </mesh>\n      ))}\n\n      {/* 본 연결선들 */}\n      {poses && (\n        <>\n          {/* 팔 연결 */}\n          <BoneLine\n            start={joints.leftShoulder}\n            end={joints.leftElbow}\n            color=\"#4ecdc4\"\n          />\n          <BoneLine\n            start={joints.leftElbow}\n            end={joints.leftWrist}\n            color=\"#4ecdc4\"\n          />\n          <BoneLine\n            start={joints.rightShoulder}\n            end={joints.rightElbow}\n            color=\"#4ecdc4\"\n          />\n          <BoneLine\n            start={joints.rightElbow}\n            end={joints.rightWrist}\n            color=\"#4ecdc4\"\n          />\n\n          {/* 어깨와 몸통 */}\n          <BoneLine\n            start={joints.leftShoulder}\n            end={joints.rightShoulder}\n            color=\"#45b7d1\"\n          />\n          <BoneLine\n            start={joints.neck}\n            end={joints.spine}\n            color=\"#45b7d1\"\n          />\n\n          {/* 다리 연결 */}\n          <BoneLine\n            start={joints.leftHip}\n            end={joints.leftKnee}\n            color=\"#96ceb4\"\n          />\n          <BoneLine\n            start={joints.leftKnee}\n            end={joints.leftAnkle}\n            color=\"#96ceb4\"\n          />\n          <BoneLine\n            start={joints.rightHip}\n            end={joints.rightKnee}\n            color=\"#96ceb4\"\n          />\n          <BoneLine\n            start={joints.rightKnee}\n            end={joints.rightAnkle}\n            color=\"#96ceb4\"\n          />\n\n          {/* 골반 */}\n          <BoneLine\n            start={joints.leftHip}\n            end={joints.rightHip}\n            color=\"#45b7d1\"\n          />\n\n          {/* 머리와 목 */}\n          <BoneLine\n            start={joints.nose}\n            end={joints.neck}\n            color=\"#f7dc6f\"\n          />\n        </>\n      )}\n    </group>\n  );\n};\n\n// 본 연결선 컴포넌트\nconst BoneLine = ({ start, end, color = \"#ffffff\" }) => {\n  const lineRef = useRef();\n\n  useFrame(() => {\n    if (lineRef.current && start && end) {\n      const points = [start, end];\n      lineRef.current.geometry.setFromPoints(points);\n    }\n  });\n\n  return (\n    <line ref={lineRef}>\n      <bufferGeometry />\n      <lineBasicMaterial color={color} linewidth={3} />\n    </line>\n  );\n};\n\nexport default Avatar3D;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}