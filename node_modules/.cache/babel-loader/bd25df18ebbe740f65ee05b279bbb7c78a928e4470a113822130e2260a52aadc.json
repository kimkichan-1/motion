{"ast":null,"code":"import * as THREE from 'three';\nimport { POSE_LANDMARKS, convertMediaPipeToWorld, calculateBoneRotation, calculateJointAngle, smoothValue, isPoseReliable } from './coordinateUtils';\n\n// MediaPipe 랜드마크와 3D 모델 본 매핑\nexport const BONE_MAPPING = {\n  // 상체\n  leftShoulder: POSE_LANDMARKS.LEFT_SHOULDER,\n  rightShoulder: POSE_LANDMARKS.RIGHT_SHOULDER,\n  leftElbow: POSE_LANDMARKS.LEFT_ELBOW,\n  rightElbow: POSE_LANDMARKS.RIGHT_ELBOW,\n  leftWrist: POSE_LANDMARKS.LEFT_WRIST,\n  rightWrist: POSE_LANDMARKS.RIGHT_WRIST,\n  // 하체\n  leftHip: POSE_LANDMARKS.LEFT_HIP,\n  rightHip: POSE_LANDMARKS.RIGHT_HIP,\n  leftKnee: POSE_LANDMARKS.LEFT_KNEE,\n  rightKnee: POSE_LANDMARKS.RIGHT_KNEE,\n  leftAnkle: POSE_LANDMARKS.LEFT_ANKLE,\n  rightAnkle: POSE_LANDMARKS.RIGHT_ANKLE,\n  // 기타\n  nose: POSE_LANDMARKS.NOSE\n};\n\n// 본 체인 정의 (부모-자식 관계)\nexport const BONE_CHAINS = {\n  leftArm: [{\n    parent: 'leftShoulder',\n    child: 'leftElbow'\n  }, {\n    parent: 'leftElbow',\n    child: 'leftWrist'\n  }],\n  rightArm: [{\n    parent: 'rightShoulder',\n    child: 'rightElbow'\n  }, {\n    parent: 'rightElbow',\n    child: 'rightWrist'\n  }],\n  leftLeg: [{\n    parent: 'leftHip',\n    child: 'leftKnee'\n  }, {\n    parent: 'leftKnee',\n    child: 'leftAnkle'\n  }],\n  rightLeg: [{\n    parent: 'rightHip',\n    child: 'rightKnee'\n  }, {\n    parent: 'rightKnee',\n    child: 'rightAnkle'\n  }],\n  spine: [{\n    parent: 'neck',\n    child: 'spine'\n  }, {\n    parent: 'spine',\n    child: 'hip'\n  }]\n};\n\n// 본 매퍼 클래스\nexport class BoneMapper {\n  constructor() {\n    this.previousPositions = {};\n    this.smoothingFactor = 0.7;\n    this.initialized = false;\n  }\n\n  // MediaPipe 포즈를 3D 본 데이터로 변환\n  mapPoseToBones(landmarks) {\n    if (!landmarks || !isPoseReliable(landmarks)) {\n      return null;\n    }\n    const boneData = {};\n\n    // 기본 관절 위치 변환\n    Object.entries(BONE_MAPPING).forEach(([boneName, landmarkIndex]) => {\n      const landmark = landmarks[landmarkIndex];\n      if (landmark) {\n        const worldPos = convertMediaPipeToWorld(landmark);\n\n        // 스무딩 적용\n        if (this.previousPositions[boneName]) {\n          boneData[boneName] = smoothValue(worldPos, this.previousPositions[boneName], this.smoothingFactor);\n        } else {\n          boneData[boneName] = worldPos;\n        }\n        this.previousPositions[boneName] = boneData[boneName].clone();\n      }\n    });\n\n    // 계산된 관절 위치 (목, 척추, 골반 중심)\n    this.calculateVirtualJoints(boneData);\n\n    // 본 회전 계산\n    this.calculateBoneRotations(boneData);\n    return boneData;\n  }\n\n  // 가상 관절 위치 계산\n  calculateVirtualJoints(boneData) {\n    // 목 위치 (양 어깨의 중점 위쪽)\n    if (boneData.leftShoulder && boneData.rightShoulder) {\n      boneData.neck = boneData.leftShoulder.clone().add(boneData.rightShoulder).multiplyScalar(0.5);\n      boneData.neck.y += 0.3; // 목 높이 조정\n    }\n\n    // 척추 위치 (어깨와 골반 중점의 중간)\n    if (boneData.leftShoulder && boneData.rightShoulder && boneData.leftHip && boneData.rightHip) {\n      const shoulderCenter = boneData.leftShoulder.clone().add(boneData.rightShoulder).multiplyScalar(0.5);\n      const hipCenter = boneData.leftHip.clone().add(boneData.rightHip).multiplyScalar(0.5);\n      boneData.spine = shoulderCenter.clone().add(hipCenter).multiplyScalar(0.5);\n    }\n\n    // 골반 중심 위치\n    if (boneData.leftHip && boneData.rightHip) {\n      boneData.hip = boneData.leftHip.clone().add(boneData.rightHip).multiplyScalar(0.5);\n    }\n  }\n\n  // 본 회전 계산\n  calculateBoneRotations(boneData) {\n    boneData.rotations = {};\n\n    // 각 본 체인에 대해 회전 계산\n    Object.entries(BONE_CHAINS).forEach(([chainName, bones]) => {\n      bones.forEach(({\n        parent,\n        child\n      }) => {\n        if (boneData[parent] && boneData[child]) {\n          const rotation = calculateBoneRotation(boneData[parent], boneData[child]);\n          boneData.rotations[`${parent}-${child}`] = rotation;\n        }\n      });\n    });\n\n    // 특별한 회전 계산 (몸통 회전 등)\n    this.calculateSpecialRotations(boneData);\n  }\n\n  // 특별한 회전 계산 (몸통, 어깨 등)\n  calculateSpecialRotations(boneData) {\n    if (!boneData.rotations) boneData.rotations = {};\n\n    // 어깨 회전 (어깨선의 기울기)\n    if (boneData.leftShoulder && boneData.rightShoulder) {\n      const shoulderDirection = new THREE.Vector3().subVectors(boneData.rightShoulder, boneData.leftShoulder).normalize();\n\n      // const horizontalRef = new THREE.Vector3(1, 0, 0);\n      boneData.rotations.shoulders = calculateBoneRotation(new THREE.Vector3(0, 0, 0), shoulderDirection);\n    }\n\n    // 골반 회전\n    if (boneData.leftHip && boneData.rightHip) {\n      const hipDirection = new THREE.Vector3().subVectors(boneData.rightHip, boneData.leftHip).normalize();\n      boneData.rotations.hips = calculateBoneRotation(new THREE.Vector3(0, 0, 0), hipDirection);\n    }\n\n    // 몸통 회전 (척추)\n    if (boneData.neck && boneData.hip) {\n      const spineDirection = new THREE.Vector3().subVectors(boneData.neck, boneData.hip).normalize();\n\n      // const verticalRef = new THREE.Vector3(0, 1, 0);\n      boneData.rotations.spine = calculateBoneRotation(new THREE.Vector3(0, 0, 0), spineDirection);\n    }\n  }\n\n  // 관절 각도 분석\n  analyzeJointAngles(boneData) {\n    const angles = {};\n\n    // 팔꿈치 각도\n    if (boneData.leftShoulder && boneData.leftElbow && boneData.leftWrist) {\n      angles.leftElbow = calculateJointAngle(boneData.leftShoulder, boneData.leftElbow, boneData.leftWrist);\n    }\n    if (boneData.rightShoulder && boneData.rightElbow && boneData.rightWrist) {\n      angles.rightElbow = calculateJointAngle(boneData.rightShoulder, boneData.rightElbow, boneData.rightWrist);\n    }\n\n    // 무릎 각도\n    if (boneData.leftHip && boneData.leftKnee && boneData.leftAnkle) {\n      angles.leftKnee = calculateJointAngle(boneData.leftHip, boneData.leftKnee, boneData.leftAnkle);\n    }\n    if (boneData.rightHip && boneData.rightKnee && boneData.rightAnkle) {\n      angles.rightKnee = calculateJointAngle(boneData.rightHip, boneData.rightKnee, boneData.rightAnkle);\n    }\n    return angles;\n  }\n\n  // 포즈 안정성 검사\n  isPoseStable(boneData) {\n    if (!this.previousPositions || Object.keys(this.previousPositions).length === 0) {\n      return false;\n    }\n    const threshold = 0.1; // 위치 변화 임계값\n    let stableJoints = 0;\n    let totalJoints = 0;\n    Object.entries(boneData).forEach(([boneName, position]) => {\n      if (position instanceof THREE.Vector3 && this.previousPositions[boneName]) {\n        const distance = position.distanceTo(this.previousPositions[boneName]);\n        if (distance < threshold) {\n          stableJoints++;\n        }\n        totalJoints++;\n      }\n    });\n    return totalJoints > 0 ? stableJoints / totalJoints > 0.8 : false;\n  }\n\n  // 매퍼 리셋\n  reset() {\n    this.previousPositions = {};\n    this.initialized = false;\n  }\n}","map":{"version":3,"names":["THREE","POSE_LANDMARKS","convertMediaPipeToWorld","calculateBoneRotation","calculateJointAngle","smoothValue","isPoseReliable","BONE_MAPPING","leftShoulder","LEFT_SHOULDER","rightShoulder","RIGHT_SHOULDER","leftElbow","LEFT_ELBOW","rightElbow","RIGHT_ELBOW","leftWrist","LEFT_WRIST","rightWrist","RIGHT_WRIST","leftHip","LEFT_HIP","rightHip","RIGHT_HIP","leftKnee","LEFT_KNEE","rightKnee","RIGHT_KNEE","leftAnkle","LEFT_ANKLE","rightAnkle","RIGHT_ANKLE","nose","NOSE","BONE_CHAINS","leftArm","parent","child","rightArm","leftLeg","rightLeg","spine","BoneMapper","constructor","previousPositions","smoothingFactor","initialized","mapPoseToBones","landmarks","boneData","Object","entries","forEach","boneName","landmarkIndex","landmark","worldPos","clone","calculateVirtualJoints","calculateBoneRotations","neck","add","multiplyScalar","y","shoulderCenter","hipCenter","hip","rotations","chainName","bones","rotation","calculateSpecialRotations","shoulderDirection","Vector3","subVectors","normalize","shoulders","hipDirection","hips","spineDirection","analyzeJointAngles","angles","isPoseStable","keys","length","threshold","stableJoints","totalJoints","position","distance","distanceTo","reset"],"sources":["C:/Users/vxbc5/Desktop/KDT/3번째 프로젝트 모션캡쳐/Sample1/src/utils/boneMapping.js"],"sourcesContent":["import * as THREE from 'three';\nimport {\n  POSE_LANDMARKS,\n  convertMediaPipeToWorld,\n  calculateBoneRotation,\n  calculateJointAngle,\n  smoothValue,\n  isPoseReliable\n} from './coordinateUtils';\n\n// MediaPipe 랜드마크와 3D 모델 본 매핑\nexport const BONE_MAPPING = {\n  // 상체\n  leftShoulder: POSE_LANDMARKS.LEFT_SHOULDER,\n  rightShoulder: POSE_LANDMARKS.RIGHT_SHOULDER,\n  leftElbow: POSE_LANDMARKS.LEFT_ELBOW,\n  rightElbow: POSE_LANDMARKS.RIGHT_ELBOW,\n  leftWrist: POSE_LANDMARKS.LEFT_WRIST,\n  rightWrist: POSE_LANDMARKS.RIGHT_WRIST,\n\n  // 하체\n  leftHip: POSE_LANDMARKS.LEFT_HIP,\n  rightHip: POSE_LANDMARKS.RIGHT_HIP,\n  leftKnee: POSE_LANDMARKS.LEFT_KNEE,\n  rightKnee: POSE_LANDMARKS.RIGHT_KNEE,\n  leftAnkle: POSE_LANDMARKS.LEFT_ANKLE,\n  rightAnkle: POSE_LANDMARKS.RIGHT_ANKLE,\n\n  // 기타\n  nose: POSE_LANDMARKS.NOSE\n};\n\n// 본 체인 정의 (부모-자식 관계)\nexport const BONE_CHAINS = {\n  leftArm: [\n    { parent: 'leftShoulder', child: 'leftElbow' },\n    { parent: 'leftElbow', child: 'leftWrist' }\n  ],\n  rightArm: [\n    { parent: 'rightShoulder', child: 'rightElbow' },\n    { parent: 'rightElbow', child: 'rightWrist' }\n  ],\n  leftLeg: [\n    { parent: 'leftHip', child: 'leftKnee' },\n    { parent: 'leftKnee', child: 'leftAnkle' }\n  ],\n  rightLeg: [\n    { parent: 'rightHip', child: 'rightKnee' },\n    { parent: 'rightKnee', child: 'rightAnkle' }\n  ],\n  spine: [\n    { parent: 'neck', child: 'spine' },\n    { parent: 'spine', child: 'hip' }\n  ]\n};\n\n// 본 매퍼 클래스\nexport class BoneMapper {\n  constructor() {\n    this.previousPositions = {};\n    this.smoothingFactor = 0.7;\n    this.initialized = false;\n  }\n\n  // MediaPipe 포즈를 3D 본 데이터로 변환\n  mapPoseToBones(landmarks) {\n    if (!landmarks || !isPoseReliable(landmarks)) {\n      return null;\n    }\n\n    const boneData = {};\n\n    // 기본 관절 위치 변환\n    Object.entries(BONE_MAPPING).forEach(([boneName, landmarkIndex]) => {\n      const landmark = landmarks[landmarkIndex];\n      if (landmark) {\n        const worldPos = convertMediaPipeToWorld(landmark);\n\n        // 스무딩 적용\n        if (this.previousPositions[boneName]) {\n          boneData[boneName] = smoothValue(\n            worldPos,\n            this.previousPositions[boneName],\n            this.smoothingFactor\n          );\n        } else {\n          boneData[boneName] = worldPos;\n        }\n\n        this.previousPositions[boneName] = boneData[boneName].clone();\n      }\n    });\n\n    // 계산된 관절 위치 (목, 척추, 골반 중심)\n    this.calculateVirtualJoints(boneData);\n\n    // 본 회전 계산\n    this.calculateBoneRotations(boneData);\n\n    return boneData;\n  }\n\n  // 가상 관절 위치 계산\n  calculateVirtualJoints(boneData) {\n    // 목 위치 (양 어깨의 중점 위쪽)\n    if (boneData.leftShoulder && boneData.rightShoulder) {\n      boneData.neck = boneData.leftShoulder.clone()\n        .add(boneData.rightShoulder)\n        .multiplyScalar(0.5);\n      boneData.neck.y += 0.3; // 목 높이 조정\n    }\n\n    // 척추 위치 (어깨와 골반 중점의 중간)\n    if (boneData.leftShoulder && boneData.rightShoulder &&\n        boneData.leftHip && boneData.rightHip) {\n\n      const shoulderCenter = boneData.leftShoulder.clone()\n        .add(boneData.rightShoulder)\n        .multiplyScalar(0.5);\n\n      const hipCenter = boneData.leftHip.clone()\n        .add(boneData.rightHip)\n        .multiplyScalar(0.5);\n\n      boneData.spine = shoulderCenter.clone()\n        .add(hipCenter)\n        .multiplyScalar(0.5);\n    }\n\n    // 골반 중심 위치\n    if (boneData.leftHip && boneData.rightHip) {\n      boneData.hip = boneData.leftHip.clone()\n        .add(boneData.rightHip)\n        .multiplyScalar(0.5);\n    }\n  }\n\n  // 본 회전 계산\n  calculateBoneRotations(boneData) {\n    boneData.rotations = {};\n\n    // 각 본 체인에 대해 회전 계산\n    Object.entries(BONE_CHAINS).forEach(([chainName, bones]) => {\n      bones.forEach(({ parent, child }) => {\n        if (boneData[parent] && boneData[child]) {\n          const rotation = calculateBoneRotation(\n            boneData[parent],\n            boneData[child]\n          );\n\n          boneData.rotations[`${parent}-${child}`] = rotation;\n        }\n      });\n    });\n\n    // 특별한 회전 계산 (몸통 회전 등)\n    this.calculateSpecialRotations(boneData);\n  }\n\n  // 특별한 회전 계산 (몸통, 어깨 등)\n  calculateSpecialRotations(boneData) {\n    if (!boneData.rotations) boneData.rotations = {};\n\n    // 어깨 회전 (어깨선의 기울기)\n    if (boneData.leftShoulder && boneData.rightShoulder) {\n      const shoulderDirection = new THREE.Vector3()\n        .subVectors(boneData.rightShoulder, boneData.leftShoulder)\n        .normalize();\n\n      // const horizontalRef = new THREE.Vector3(1, 0, 0);\n      boneData.rotations.shoulders = calculateBoneRotation(\n        new THREE.Vector3(0, 0, 0),\n        shoulderDirection\n      );\n    }\n\n    // 골반 회전\n    if (boneData.leftHip && boneData.rightHip) {\n      const hipDirection = new THREE.Vector3()\n        .subVectors(boneData.rightHip, boneData.leftHip)\n        .normalize();\n\n      boneData.rotations.hips = calculateBoneRotation(\n        new THREE.Vector3(0, 0, 0),\n        hipDirection\n      );\n    }\n\n    // 몸통 회전 (척추)\n    if (boneData.neck && boneData.hip) {\n      const spineDirection = new THREE.Vector3()\n        .subVectors(boneData.neck, boneData.hip)\n        .normalize();\n\n      // const verticalRef = new THREE.Vector3(0, 1, 0);\n      boneData.rotations.spine = calculateBoneRotation(\n        new THREE.Vector3(0, 0, 0),\n        spineDirection\n      );\n    }\n  }\n\n  // 관절 각도 분석\n  analyzeJointAngles(boneData) {\n    const angles = {};\n\n    // 팔꿈치 각도\n    if (boneData.leftShoulder && boneData.leftElbow && boneData.leftWrist) {\n      angles.leftElbow = calculateJointAngle(\n        boneData.leftShoulder,\n        boneData.leftElbow,\n        boneData.leftWrist\n      );\n    }\n\n    if (boneData.rightShoulder && boneData.rightElbow && boneData.rightWrist) {\n      angles.rightElbow = calculateJointAngle(\n        boneData.rightShoulder,\n        boneData.rightElbow,\n        boneData.rightWrist\n      );\n    }\n\n    // 무릎 각도\n    if (boneData.leftHip && boneData.leftKnee && boneData.leftAnkle) {\n      angles.leftKnee = calculateJointAngle(\n        boneData.leftHip,\n        boneData.leftKnee,\n        boneData.leftAnkle\n      );\n    }\n\n    if (boneData.rightHip && boneData.rightKnee && boneData.rightAnkle) {\n      angles.rightKnee = calculateJointAngle(\n        boneData.rightHip,\n        boneData.rightKnee,\n        boneData.rightAnkle\n      );\n    }\n\n    return angles;\n  }\n\n  // 포즈 안정성 검사\n  isPoseStable(boneData) {\n    if (!this.previousPositions || Object.keys(this.previousPositions).length === 0) {\n      return false;\n    }\n\n    const threshold = 0.1; // 위치 변화 임계값\n    let stableJoints = 0;\n    let totalJoints = 0;\n\n    Object.entries(boneData).forEach(([boneName, position]) => {\n      if (position instanceof THREE.Vector3 && this.previousPositions[boneName]) {\n        const distance = position.distanceTo(this.previousPositions[boneName]);\n        if (distance < threshold) {\n          stableJoints++;\n        }\n        totalJoints++;\n      }\n    });\n\n    return totalJoints > 0 ? (stableJoints / totalJoints) > 0.8 : false;\n  }\n\n  // 매퍼 리셋\n  reset() {\n    this.previousPositions = {};\n    this.initialized = false;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}