{"ast":null,"code":"import * as THREE from 'three';\n\n// MediaPipe 좌표를 3D 월드 좌표로 변환\nexport const convertMediaPipeToWorld = (landmark, scale = 4) => {\n  return new THREE.Vector3((landmark.x - 0.5) * scale,\n  // X: 중심을 0으로, -2 to 2 범위\n  -(landmark.y - 0.5) * scale,\n  // Y: 뒤집기 (MediaPipe는 위가 0)\n  (landmark.z || 0) * scale * 0.5 // Z: 깊이 정보 (제한적)\n  );\n};\n\n// 두 점 사이의 벡터 계산\nexport const calculateDirection = (from, to) => {\n  return new THREE.Vector3().subVectors(to, from).normalize();\n};\n\n// 두 벡터 사이의 회전 쿼터니언 계산\nexport const calculateRotationBetweenVectors = (from, to) => {\n  const quaternion = new THREE.Quaternion();\n  quaternion.setFromUnitVectors(from.normalize(), to.normalize());\n  return quaternion;\n};\n\n// 관절 각도 계산 (3점을 이용한 각도)\nexport const calculateJointAngle = (point1, joint, point2) => {\n  const vector1 = new THREE.Vector3().subVectors(point1, joint).normalize();\n  const vector2 = new THREE.Vector3().subVectors(point2, joint).normalize();\n  const dotProduct = vector1.dot(vector2);\n  const angle = Math.acos(Math.max(-1, Math.min(1, dotProduct)));\n  return angle;\n};\n\n// 본의 회전 계산 (부모-자식 관계)\nexport const calculateBoneRotation = (parentPos, childPos, referenceDirection = new THREE.Vector3(0, 1, 0)) => {\n  const currentDirection = calculateDirection(parentPos, childPos);\n  return calculateRotationBetweenVectors(referenceDirection, currentDirection);\n};\n\n// 스무딩 필터 (이전 값과 현재 값을 보간)\nexport const smoothValue = (currentValue, previousValue, smoothingFactor = 0.8) => {\n  if (!previousValue) return currentValue;\n  return previousValue.clone().lerp(currentValue, 1 - smoothingFactor);\n};\n\n// 포즈의 신뢰도 검사\nexport const isPoseReliable = (landmarks, minConfidence = 0.5) => {\n  if (!landmarks || landmarks.length === 0) return false;\n  const keyJoints = [11, 12, 13, 14, 15, 16, 23, 24, 25, 26]; // 주요 관절들\n  let reliableJoints = 0;\n  keyJoints.forEach(index => {\n    if (landmarks[index] && landmarks[index].visibility > minConfidence) {\n      reliableJoints++;\n    }\n  });\n  return reliableJoints >= keyJoints.length * 0.7; // 70% 이상의 관절이 신뢰할만한 경우\n};\n\n// 포즈 데이터 정규화\nexport const normalizePoseData = landmarks => {\n  if (!landmarks || landmarks.length === 0) return null;\n\n  // 어깨 중점을 기준으로 정규화\n  const leftShoulder = landmarks[11];\n  const rightShoulder = landmarks[12];\n  if (!leftShoulder || !rightShoulder) return landmarks;\n  const shoulderCenter = {\n    x: (leftShoulder.x + rightShoulder.x) / 2,\n    y: (leftShoulder.y + rightShoulder.y) / 2,\n    z: (leftShoulder.z + rightShoulder.z) / 2\n  };\n\n  // 어깨 너비로 스케일 정규화\n  const shoulderWidth = Math.abs(rightShoulder.x - leftShoulder.x);\n  const scale = shoulderWidth > 0 ? 1 / shoulderWidth : 1;\n  return landmarks.map(landmark => {\n    if (!landmark) return landmark;\n    return {\n      ...landmark,\n      x: (landmark.x - shoulderCenter.x) * scale,\n      y: (landmark.y - shoulderCenter.y) * scale,\n      z: (landmark.z - shoulderCenter.z) * scale\n    };\n  });\n};\n\n// MediaPipe 랜드마크 인덱스 상수\nexport const POSE_LANDMARKS = {\n  NOSE: 0,\n  LEFT_EYE_INNER: 1,\n  LEFT_EYE: 2,\n  LEFT_EYE_OUTER: 3,\n  RIGHT_EYE_INNER: 4,\n  RIGHT_EYE: 5,\n  RIGHT_EYE_OUTER: 6,\n  LEFT_EAR: 7,\n  RIGHT_EAR: 8,\n  MOUTH_LEFT: 9,\n  MOUTH_RIGHT: 10,\n  LEFT_SHOULDER: 11,\n  RIGHT_SHOULDER: 12,\n  LEFT_ELBOW: 13,\n  RIGHT_ELBOW: 14,\n  LEFT_WRIST: 15,\n  RIGHT_WRIST: 16,\n  LEFT_PINKY: 17,\n  RIGHT_PINKY: 18,\n  LEFT_INDEX: 19,\n  RIGHT_INDEX: 20,\n  LEFT_THUMB: 21,\n  RIGHT_THUMB: 22,\n  LEFT_HIP: 23,\n  RIGHT_HIP: 24,\n  LEFT_KNEE: 25,\n  RIGHT_KNEE: 26,\n  LEFT_ANKLE: 27,\n  RIGHT_ANKLE: 28,\n  LEFT_HEEL: 29,\n  RIGHT_HEEL: 30,\n  LEFT_FOOT_INDEX: 31,\n  RIGHT_FOOT_INDEX: 32\n};","map":{"version":3,"names":["THREE","convertMediaPipeToWorld","landmark","scale","Vector3","x","y","z","calculateDirection","from","to","subVectors","normalize","calculateRotationBetweenVectors","quaternion","Quaternion","setFromUnitVectors","calculateJointAngle","point1","joint","point2","vector1","vector2","dotProduct","dot","angle","Math","acos","max","min","calculateBoneRotation","parentPos","childPos","referenceDirection","currentDirection","smoothValue","currentValue","previousValue","smoothingFactor","clone","lerp","isPoseReliable","landmarks","minConfidence","length","keyJoints","reliableJoints","forEach","index","visibility","normalizePoseData","leftShoulder","rightShoulder","shoulderCenter","shoulderWidth","abs","map","POSE_LANDMARKS","NOSE","LEFT_EYE_INNER","LEFT_EYE","LEFT_EYE_OUTER","RIGHT_EYE_INNER","RIGHT_EYE","RIGHT_EYE_OUTER","LEFT_EAR","RIGHT_EAR","MOUTH_LEFT","MOUTH_RIGHT","LEFT_SHOULDER","RIGHT_SHOULDER","LEFT_ELBOW","RIGHT_ELBOW","LEFT_WRIST","RIGHT_WRIST","LEFT_PINKY","RIGHT_PINKY","LEFT_INDEX","RIGHT_INDEX","LEFT_THUMB","RIGHT_THUMB","LEFT_HIP","RIGHT_HIP","LEFT_KNEE","RIGHT_KNEE","LEFT_ANKLE","RIGHT_ANKLE","LEFT_HEEL","RIGHT_HEEL","LEFT_FOOT_INDEX","RIGHT_FOOT_INDEX"],"sources":["C:/Users/vxbc5/Desktop/KDT/3번째 프로젝트 모션캡쳐/Sample1/src/utils/coordinateUtils.js"],"sourcesContent":["import * as THREE from 'three';\n\n// MediaPipe 좌표를 3D 월드 좌표로 변환\nexport const convertMediaPipeToWorld = (landmark, scale = 4) => {\n  return new THREE.Vector3(\n    (landmark.x - 0.5) * scale,     // X: 중심을 0으로, -2 to 2 범위\n    -(landmark.y - 0.5) * scale,    // Y: 뒤집기 (MediaPipe는 위가 0)\n    (landmark.z || 0) * scale * 0.5 // Z: 깊이 정보 (제한적)\n  );\n};\n\n// 두 점 사이의 벡터 계산\nexport const calculateDirection = (from, to) => {\n  return new THREE.Vector3().subVectors(to, from).normalize();\n};\n\n// 두 벡터 사이의 회전 쿼터니언 계산\nexport const calculateRotationBetweenVectors = (from, to) => {\n  const quaternion = new THREE.Quaternion();\n  quaternion.setFromUnitVectors(from.normalize(), to.normalize());\n  return quaternion;\n};\n\n// 관절 각도 계산 (3점을 이용한 각도)\nexport const calculateJointAngle = (point1, joint, point2) => {\n  const vector1 = new THREE.Vector3().subVectors(point1, joint).normalize();\n  const vector2 = new THREE.Vector3().subVectors(point2, joint).normalize();\n\n  const dotProduct = vector1.dot(vector2);\n  const angle = Math.acos(Math.max(-1, Math.min(1, dotProduct)));\n\n  return angle;\n};\n\n// 본의 회전 계산 (부모-자식 관계)\nexport const calculateBoneRotation = (parentPos, childPos, referenceDirection = new THREE.Vector3(0, 1, 0)) => {\n  const currentDirection = calculateDirection(parentPos, childPos);\n  return calculateRotationBetweenVectors(referenceDirection, currentDirection);\n};\n\n// 스무딩 필터 (이전 값과 현재 값을 보간)\nexport const smoothValue = (currentValue, previousValue, smoothingFactor = 0.8) => {\n  if (!previousValue) return currentValue;\n\n  return previousValue.clone().lerp(currentValue, 1 - smoothingFactor);\n};\n\n// 포즈의 신뢰도 검사\nexport const isPoseReliable = (landmarks, minConfidence = 0.5) => {\n  if (!landmarks || landmarks.length === 0) return false;\n\n  const keyJoints = [11, 12, 13, 14, 15, 16, 23, 24, 25, 26]; // 주요 관절들\n  let reliableJoints = 0;\n\n  keyJoints.forEach(index => {\n    if (landmarks[index] && landmarks[index].visibility > minConfidence) {\n      reliableJoints++;\n    }\n  });\n\n  return reliableJoints >= keyJoints.length * 0.7; // 70% 이상의 관절이 신뢰할만한 경우\n};\n\n// 포즈 데이터 정규화\nexport const normalizePoseData = (landmarks) => {\n  if (!landmarks || landmarks.length === 0) return null;\n\n  // 어깨 중점을 기준으로 정규화\n  const leftShoulder = landmarks[11];\n  const rightShoulder = landmarks[12];\n\n  if (!leftShoulder || !rightShoulder) return landmarks;\n\n  const shoulderCenter = {\n    x: (leftShoulder.x + rightShoulder.x) / 2,\n    y: (leftShoulder.y + rightShoulder.y) / 2,\n    z: (leftShoulder.z + rightShoulder.z) / 2\n  };\n\n  // 어깨 너비로 스케일 정규화\n  const shoulderWidth = Math.abs(rightShoulder.x - leftShoulder.x);\n  const scale = shoulderWidth > 0 ? 1 / shoulderWidth : 1;\n\n  return landmarks.map(landmark => {\n    if (!landmark) return landmark;\n\n    return {\n      ...landmark,\n      x: (landmark.x - shoulderCenter.x) * scale,\n      y: (landmark.y - shoulderCenter.y) * scale,\n      z: (landmark.z - shoulderCenter.z) * scale\n    };\n  });\n};\n\n// MediaPipe 랜드마크 인덱스 상수\nexport const POSE_LANDMARKS = {\n  NOSE: 0,\n  LEFT_EYE_INNER: 1,\n  LEFT_EYE: 2,\n  LEFT_EYE_OUTER: 3,\n  RIGHT_EYE_INNER: 4,\n  RIGHT_EYE: 5,\n  RIGHT_EYE_OUTER: 6,\n  LEFT_EAR: 7,\n  RIGHT_EAR: 8,\n  MOUTH_LEFT: 9,\n  MOUTH_RIGHT: 10,\n  LEFT_SHOULDER: 11,\n  RIGHT_SHOULDER: 12,\n  LEFT_ELBOW: 13,\n  RIGHT_ELBOW: 14,\n  LEFT_WRIST: 15,\n  RIGHT_WRIST: 16,\n  LEFT_PINKY: 17,\n  RIGHT_PINKY: 18,\n  LEFT_INDEX: 19,\n  RIGHT_INDEX: 20,\n  LEFT_THUMB: 21,\n  RIGHT_THUMB: 22,\n  LEFT_HIP: 23,\n  RIGHT_HIP: 24,\n  LEFT_KNEE: 25,\n  RIGHT_KNEE: 26,\n  LEFT_ANKLE: 27,\n  RIGHT_ANKLE: 28,\n  LEFT_HEEL: 29,\n  RIGHT_HEEL: 30,\n  LEFT_FOOT_INDEX: 31,\n  RIGHT_FOOT_INDEX: 32\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}